pico-8 cartridge // http://www.pico-8.com
version 41
__lua__

-- for collision detection,
-- there are some choices.
--
-- what shape are our hitboxes?
--
-- do we do vector-based to
-- avoid things passing through
-- each other at high speed?
--
-- do we do space partitioning
-- to make it more efficient to
-- check lots of collisions?

actor = {
 x=64,
 y=64,
 xv=1,
 yv=0.2
}

actor2 = {
 x=32,
 y=32,
 xv=.8,
 yv=.6
}

function update_actor(actor)
 actor.x += actor.xv
 actor.y += actor.yv
 if actor.x >= 120 or
    actor.x <= 0 then
  sfx(0)
  actor.xv = -actor.xv
 end
 if actor.y >= 120 or
    actor.y <= 0 then
  sfx(0)
  actor.yv = -actor.yv
 end
end

function collide()
 if abs(actor.x-actor2.x) < 8 and
    abs(actor.y-actor2.y) < 8 then
  sfx(0)
  actor.xv, actor2.xv = actor2.xv, actor.xv
  actor.yv, actor2.yv = actor2.yv, actor.yv
 end
end

function _draw()
 cls(5)
 update_actor(actor)
 update_actor(actor2)
 collide()
 spr(1,actor.x,actor.y)
 spr(1,actor2.x,actor2.y)
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700006006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700060000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0001000019660156201161019600106001d6000f600136001360000600006000060000600006000060000600006000060000600006000060000600006001c6000060000600006000060000600006000060000600
